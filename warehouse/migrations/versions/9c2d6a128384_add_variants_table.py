# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"""
add variants table

Revision ID: 9c2d6a128384
Revises: bb6943882aa9
Create Date: 2024-08-13 14:30:40.329212
"""

import sqlalchemy as sa

from alembic import op

revision = "9c2d6a128384"
down_revision = "bb6943882aa9"

# Note: It is VERY important to ensure that a migration does not lock for a
#       long period of time and to ensure that each individual migration does
#       not break compatibility with the *previous* version of the code base.
#       This is because the migrations will be ran automatically as part of the
#       deployment process, but while the previous version of the code is still
#       up and running. Thus backwards incompatible changes must be broken up
#       over multiple migrations inside of multiple pull requests in order to
#       phase them in over multiple deploys.
#
#       By default, migrations cannot wait more than 4s on acquiring a lock
#       and each individual statement cannot take more than 5s. This helps
#       prevent situations where a slow migration takes the entire site down.
#
#       If you need to increase this timeout for a migration, you can do so
#       by adding:
#
#           op.execute("SET statement_timeout = 5000")
#           op.execute("SET lock_timeout = 4000")
#
#       To whatever values are reasonable for this migration as part of your
#       migration.


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "variants",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("sha256_digest", sa.String(), nullable=False),
        sa.Column("variant_json", sa.String(), nullable=False),
        sa.CheckConstraint("sha256_digest ~* '^[A-F0-9]{64}$'"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index("variant_idx", "variants", ["sha256_digest"], unique=False)
    op.add_column("release_files", sa.Column("variant_id", sa.Integer(), nullable=True))
    op.create_foreign_key(
        None,
        "release_files",
        "variants",
        ["variant_id"],
        ["id"],
        onupdate="CASCADE",
        ondelete="CASCADE",
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, "release_files", type_="foreignkey")
    op.drop_column("release_files", "variant_id")
    op.drop_index("variant_idx", table_name="variants")
    op.drop_table("variants")
    # ### end Alembic commands ###
